[{"href": "./index.html", "title": "code block", "contents": "let parse = Minimist.parse(~alias=[(\"h\", \"help\")], ~presence=[\"help\"], ~multi=[\"rename\"], ~strings=[\"base\"]);\n\nlet help = {|\n# pack.re - a simple js bundler for reason\n\nUsage: pack.re [options] entry-file.js > bundle.js\n\n  --base (default: current directory)\n      expected to contain node_modules\n  --rename newName=realName (can be defined multiple times)\n      maps `require(\"newName\")` to a node_module called \"realName\"\n  -h, --help\n      print this help\n|};\n\nlet fail = (msg) => {\n  print_endline(msg);\n  print_endline(help);\n  exit(1);\n};\n\nlet args = List.tl(Array.to_list(Sys.argv));\n/* Some example args for you */\nlet args = [\"--base\", \"awesome\", \"some-entry.js\"];\n\nswitch (parse(args)) {\n| Minimist.Error(err) => fail(Minimist.report(err))\n| Ok(opts) =>\nif (Minimist.StrSet.mem(\"help\", opts.presence)) {\n  print_endline(help); exit(0);\n} else switch (opts.rest) {\n  | [] => fail(\"Expected entry file as final argument\")\n  | [entry] => {\n    let base = Minimist.get(opts.strings, \"base\");\n    let renames = Minimist.multi(opts.multi, \"rename\");\n    print_endline(\"All good!\")\n  }\n  | _ => fail(\"Only one entry file allowed\")\n}\n};", "rendered": "<pre><code>let parse = Minimist.parse(~alias=[(\"h\", \"help\")], ~presence=[\"help\"], ~multi=[\"rename\"], ~strings=[\"base\"]);\n\nlet help = {|\n# pack.re - a simple js bundler for reason\n\nUsage: pack.re [options] entry-file.js > bundle.js\n\n  --base (default: current directory)\n      expected to contain node_modules\n  --rename newName=realName (can be defined multiple times)\n      maps `require(\"newName\")` to a node_module called \"realName\"\n  -h, --help\n      print this help\n|};\n\nlet fail = (msg) => {\n  print_endline(msg);\n  print_endline(help);\n  exit(1);\n};\n\nlet args = List.tl(Array.to_list(Sys.argv));\n/* Some example args for you */\nlet args = [\"--base\", \"awesome\", \"some-entry.js\"];\n\nswitch (parse(args)) {\n| Minimist.Error(err) => fail(Minimist.report(err))\n| Ok(opts) =>\nif (Minimist.StrSet.mem(\"help\", opts.presence)) {\n  print_endline(help); exit(0);\n} else switch (opts.rest) {\n  | [] => fail(\"Expected entry file as final argument\")\n  | [entry] => {\n    let base = Minimist.get(opts.strings, \"base\");\n    let renames = Minimist.multi(opts.multi, \"rename\");\n    print_endline(\"All good!\")\n  }\n  | _ => fail(\"Only one entry file allowed\")\n}\n};</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "(from pack.re):", "rendered": "(from <a href=\"https://www.npmjs.com/package/pack.re\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">pack.re</a>):", "breadcrumb": "Home"},
{"href": "./index.html#Example-usage", "title": "Example usage", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A no-frills cli argument parser for reason, inspired by minimist and yargs.", "rendered": "A no-frills cli argument parser for reason, inspired by <a href=\"https://www.npmjs.com/package/minimist\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">minimist</a> and <a href=\"https://www.npmjs.com/package/yargs\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">yargs</a>.", "breadcrumb": "Home"},
{"href": "./index.html#Minimist.re", "title": "Minimist.re", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/Test.html#value-parse", "title": "parse", "contents": "parse option list elt list string result opts bools ", "rendered": "<h4 class='item'>let parse = (\n    ~?bools: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"Minimist.StrSet.elt\">elt</a>)),\n    list(string)\n) => <a href=\"./api/Minimist.html#type-result\" title=\"Minimist.result\">result</a>(\n    <a href=\"./api/Minimist.html#type-opts\" title=\"Minimist.opts\">opts</a>,\n    [&gt; `BadValue of Minimist.StrSet.elt * string\n | `Unknown of Minimist.StrSet.elt ]\n)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-report", "title": "report", "contents": "report unit ", "rendered": "<h4 class='item'>let report = unit => 'a</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-ensure", "title": "ensure", "contents": "ensure bool string unit  ", "rendered": "<h4 class='item'>let ensure = (bool, string) => unit</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-failures", "title": "failures", "contents": "failures Pervasives ref int", "rendered": "<h4 class='item'>let failures = Pervasives.ref(int)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html#value-tests", "title": "tests", "contents": "tests Pervasives ref int", "rendered": "<h4 class='item'>let tests = Pervasives.ref(int)</h4>", "breadcrumb": "Test"},
{"href": "./api/Test.html", "title": "Test", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Test"},
{"href": "./api/Test.html", "title": "Test", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Test"},
{"href": "./api/Test.html#Test", "title": "Test", "contents": "", "rendered": "", "breadcrumb": "Test"},
{"href": "./api/Minimist.html#value-report", "title": "report", "contents": "report string ", "rendered": "<h4 class='item'>let report = [&lt; `BadValue of string * string | `Unknown of string ] => string</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-multi", "title": "multi", "contents": "multi StrMap t list key list  ", "rendered": "<h4 class='item'>let multi = (<a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(list('a)), <a href=\"./api/Minimist.html#type-StrMap.key\" title=\"StrMap.key\">key</a>) => list('a)</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-get", "title": "get", "contents": "get StrMap t key option  ", "rendered": "<h4 class='item'>let get = (<a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>('a), <a href=\"./api/Minimist.html#type-StrMap.key\" title=\"StrMap.key\">key</a>) => option('a)</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-parse", "title": "parse", "contents": "parse option list string elt option list elt option list elt option list elt option list elt option list elt option list elt list string result opts alias presence bools floats ints strings multi ", "rendered": "<h4 class='item'>let parse = (\n    ~?alias: option(list((string, <a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>))),\n    ~?presence: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    ~?bools: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    ~?floats: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    ~?ints: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    ~?strings: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    ~?multi: option(list(<a href=\"./api/Minimist.html#type-StrSet.elt\" title=\"StrSet.elt\">elt</a>)),\n    list(string)\n) => <a href=\"./api/Minimist.html#type-result\">result</a>(\n    <a href=\"./api/Minimist.html#type-opts\">opts</a>,\n    [&gt; `BadValue of StrSet.elt * string | `Unknown of StrSet.elt ]\n)</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-getInt", "title": "getInt", "contents": "getInt list string option int list string ", "rendered": "<h4 class='item'>let getInt = list(string) => option((int, list(string)))</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-getFloat", "title": "getFloat", "contents": "getFloat list string option float list string ", "rendered": "<h4 class='item'>let getFloat = list(string) => option((float, list(string)))</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-getBool", "title": "getBool", "contents": "getBool list string option bool list string ", "rendered": "<h4 class='item'>let getBool = list(string) => option((bool, list(string)))</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-getValue", "title": "getValue", "contents": "getValue list string option string list string ", "rendered": "<h4 class='item'>let getValue = list(string) => option(\n    (string, list(string))\n)</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-maybeAssoc", "title": "maybeAssoc", "contents": "maybeAssoc list option  ", "rendered": "<h4 class='item'>let maybeAssoc = ('a, list(('a, 'a))) => option('a)</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#value-empty", "title": "empty", "contents": "empty opts", "rendered": "<h4 class='item'>let empty = <a href=\"./api/Minimist.html#type-opts\">opts</a></h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#type-opts", "title": "opts", "contents": "opts presence StrSet t bools StrMap t bool floats StrMap t float ints StrMap t int strings StrMap t string multi StrMap t list string rest list string", "rendered": "<h4 class='item'>type opts = {\n    presence: <a href=\"./api/Minimist.html#module-StrSet\">StrSet</a>.<a href=\"./api/Minimist.html#type-StrSet.t\">t</a>,\n    bools: <a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(bool),\n    floats: <a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(float),\n    ints: <a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(int),\n    strings: <a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(string),\n    multi: <a href=\"./api/Minimist.html#module-StrMap\">StrMap</a>.<a href=\"./api/Minimist.html#type-StrMap.t\">t</a>(list(string)),\n    rest: list(string)\n}</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#type-result", "title": "result", "contents": "result ", "rendered": "<h4 class='item'>type result('a, 'b) = | Ok('a) | Error('b)\n</h4>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html", "title": "Minimist", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html", "title": "Minimist", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Minimist"},
{"href": "./api/Minimist.html#Minimist", "title": "Minimist", "contents": "", "rendered": "", "breadcrumb": "Minimist"}]