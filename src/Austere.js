// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var StrMap = $$Map.Make({
      compare: $$String.compare
    });

var StrSet = $$Set.Make({
      compare: $$String.compare
    });

var empty_000 = /* presence */StrSet.empty;

var empty_001 = /* bools */StrMap.empty;

var empty_002 = /* floats */StrMap.empty;

var empty_003 = /* ints */StrMap.empty;

var empty_004 = /* strings */StrMap.empty;

var empty_005 = /* multi */StrMap.empty;

var empty = /* record */[
  empty_000,
  empty_001,
  empty_002,
  empty_003,
  empty_004,
  empty_005,
  /* rest : [] */0
];

function maybeAssoc(key, list) {
  try {
    return Caml_option.some(List.assoc(key, list));
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return ;
    } else {
      throw exn;
    }
  }
}

function getValue(items) {
  if (items) {
    var name = items[0];
    if (Caml_string.get(name, 0) === /* "-" */45) {
      return ;
    } else {
      return /* tuple */[
              name,
              items[1]
            ];
    }
  }
  
}

function getBool(items) {
  var match = getValue(items);
  if (match !== undefined) {
    var match$1 = match;
    switch (match$1[0]) {
      case "false" :
          return /* tuple */[
                  false,
                  match$1[1]
                ];
      case "true" :
          return /* tuple */[
                  true,
                  match$1[1]
                ];
      default:
        return ;
    }
  }
  
}

function getFloat(items) {
  var match = getValue(items);
  if (match !== undefined) {
    var match$1 = match;
    try {
      return /* tuple */[
              Caml_format.caml_float_of_string(match$1[0]),
              match$1[1]
            ];
    }
    catch (exn){
      return ;
    }
  }
  
}

function getInt(items) {
  var match = getValue(items);
  if (match !== undefined) {
    var match$1 = match;
    try {
      return /* tuple */[
              Caml_format.caml_int_of_string(match$1[0]),
              match$1[1]
            ];
    }
    catch (exn){
      return ;
    }
  }
  
}

function parse($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, args) {
  var alias = $staropt$star !== undefined ? $staropt$star : /* [] */0;
  var presence = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var bools = $staropt$star$2 !== undefined ? $staropt$star$2 : /* [] */0;
  var floats = $staropt$star$3 !== undefined ? $staropt$star$3 : /* [] */0;
  var ints = $staropt$star$4 !== undefined ? $staropt$star$4 : /* [] */0;
  var strings = $staropt$star$5 !== undefined ? $staropt$star$5 : /* [] */0;
  var multi = $staropt$star$6 !== undefined ? $staropt$star$6 : /* [] */0;
  var _items = args;
  var _opts = empty;
  while(true) {
    var opts = _opts;
    var items = _items;
    if (items) {
      var rest = items[1];
      var name = items[0];
      var arg = Caml_string.get(name, 0) === /* "-" */45 ? (
          name.length > 1 && Caml_string.get(name, 1) === /* "-" */45 ? $$String.sub(name, 2, name.length - 2 | 0) : $$String.sub(name, 1, name.length - 1 | 0)
        ) : undefined;
      if (arg !== undefined) {
        var name$1 = arg;
        var match = maybeAssoc(name$1, alias);
        var name$2 = match !== undefined ? match : name$1;
        if (List.mem(name$2, presence)) {
          _opts = /* record */[
            /* presence */Curry._2(StrSet.add, name$2, opts[/* presence */0]),
            /* bools */opts[/* bools */1],
            /* floats */opts[/* floats */2],
            /* ints */opts[/* ints */3],
            /* strings */opts[/* strings */4],
            /* multi */opts[/* multi */5],
            /* rest */opts[/* rest */6]
          ];
          _items = rest;
          continue ;
        } else if (List.mem(name$2, bools)) {
          var match$1 = getBool(rest);
          if (match$1 !== undefined) {
            var match$2 = match$1;
            _opts = /* record */[
              /* presence */opts[/* presence */0],
              /* bools */Curry._3(StrMap.add, name$2, match$2[0], opts[/* bools */1]),
              /* floats */opts[/* floats */2],
              /* ints */opts[/* ints */3],
              /* strings */opts[/* strings */4],
              /* multi */opts[/* multi */5],
              /* rest */opts[/* rest */6]
            ];
            _items = match$2[1];
            continue ;
          } else {
            return /* Error */Block.__(1, [/* `BadValue */[
                        -1053200500,
                        /* tuple */[
                          name$2,
                          "boolean"
                        ]
                      ]]);
          }
        } else if (List.mem(name$2, floats)) {
          var match$3 = getFloat(rest);
          if (match$3 !== undefined) {
            var match$4 = match$3;
            _opts = /* record */[
              /* presence */opts[/* presence */0],
              /* bools */opts[/* bools */1],
              /* floats */Curry._3(StrMap.add, name$2, match$4[0], opts[/* floats */2]),
              /* ints */opts[/* ints */3],
              /* strings */opts[/* strings */4],
              /* multi */opts[/* multi */5],
              /* rest */opts[/* rest */6]
            ];
            _items = match$4[1];
            continue ;
          } else {
            return /* Error */Block.__(1, [/* `BadValue */[
                        -1053200500,
                        /* tuple */[
                          name$2,
                          "float"
                        ]
                      ]]);
          }
        } else if (List.mem(name$2, ints)) {
          var match$5 = getInt(rest);
          if (match$5 !== undefined) {
            var match$6 = match$5;
            _opts = /* record */[
              /* presence */opts[/* presence */0],
              /* bools */opts[/* bools */1],
              /* floats */opts[/* floats */2],
              /* ints */Curry._3(StrMap.add, name$2, match$6[0], opts[/* ints */3]),
              /* strings */opts[/* strings */4],
              /* multi */opts[/* multi */5],
              /* rest */opts[/* rest */6]
            ];
            _items = match$6[1];
            continue ;
          } else {
            return /* Error */Block.__(1, [/* `BadValue */[
                        -1053200500,
                        /* tuple */[
                          name$2,
                          "integer"
                        ]
                      ]]);
          }
        } else if (List.mem(name$2, strings)) {
          var match$7 = getValue(rest);
          if (match$7 !== undefined) {
            var match$8 = match$7;
            _opts = /* record */[
              /* presence */opts[/* presence */0],
              /* bools */opts[/* bools */1],
              /* floats */opts[/* floats */2],
              /* ints */opts[/* ints */3],
              /* strings */Curry._3(StrMap.add, name$2, match$8[0], opts[/* strings */4]),
              /* multi */opts[/* multi */5],
              /* rest */opts[/* rest */6]
            ];
            _items = match$8[1];
            continue ;
          } else {
            return /* Error */Block.__(1, [/* `BadValue */[
                        -1053200500,
                        /* tuple */[
                          name$2,
                          "string"
                        ]
                      ]]);
          }
        } else if (List.mem(name$2, multi)) {
          var match$9 = getValue(rest);
          if (match$9 !== undefined) {
            var match$10 = match$9;
            var value = match$10[0];
            _opts = /* record */[
              /* presence */opts[/* presence */0],
              /* bools */opts[/* bools */1],
              /* floats */opts[/* floats */2],
              /* ints */opts[/* ints */3],
              /* strings */opts[/* strings */4],
              /* multi */Curry._2(StrMap.mem, name$2, opts[/* multi */5]) ? Curry._3(StrMap.add, name$2, /* :: */[
                      value,
                      Curry._2(StrMap.find, name$2, opts[/* multi */5])
                    ], opts[/* multi */5]) : Curry._3(StrMap.add, name$2, /* :: */[
                      value,
                      /* [] */0
                    ], opts[/* multi */5]),
              /* rest */opts[/* rest */6]
            ];
            _items = match$10[1];
            continue ;
          } else {
            return /* Error */Block.__(1, [/* `BadValue */[
                        -1053200500,
                        /* tuple */[
                          name$2,
                          "string"
                        ]
                      ]]);
          }
        } else {
          return /* Error */Block.__(1, [/* `Unknown */[
                      785140586,
                      name$2
                    ]]);
        }
      } else {
        _opts = /* record */[
          /* presence */opts[/* presence */0],
          /* bools */opts[/* bools */1],
          /* floats */opts[/* floats */2],
          /* ints */opts[/* ints */3],
          /* strings */opts[/* strings */4],
          /* multi */opts[/* multi */5],
          /* rest : :: */[
            name,
            opts[/* rest */6]
          ]
        ];
        _items = rest;
        continue ;
      }
    } else {
      return /* Ok */Block.__(0, [opts]);
    }
  };
}

function get(map, key) {
  if (Curry._2(StrMap.mem, key, map)) {
    return Caml_option.some(Curry._2(StrMap.find, key, map));
  }
  
}

function multi(map, key) {
  if (Curry._2(StrMap.mem, key, map)) {
    return Curry._2(StrMap.find, key, map);
  } else {
    return /* [] */0;
  }
}

function report(err) {
  if (err[0] >= 785140586) {
    return "Unexpected argument: " + err[1];
  } else {
    var match = err[1];
    return "Need a " + (match[1] + (" value for argument " + match[0]));
  }
}

exports.StrMap = StrMap;
exports.StrSet = StrSet;
exports.empty = empty;
exports.maybeAssoc = maybeAssoc;
exports.getValue = getValue;
exports.getBool = getBool;
exports.getFloat = getFloat;
exports.getInt = getInt;
exports.parse = parse;
exports.get = get;
exports.multi = multi;
exports.report = report;
/* StrMap Not a pure module */
